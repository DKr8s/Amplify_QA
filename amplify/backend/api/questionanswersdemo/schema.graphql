type Answer
  @model(
    subscriptions: {
      onCreate: ["onCreateAnswer"]
      onUpdate: ["onUpdateAnswer"]
      onDelete: ["onDeleteAnswer"]
    }
  )
  @auth(rules: [
    { allow: public, operations: [create, read, update, delete] },
    { allow: owner, operations: [create, read, update, delete], identityClaim: "sub" }
  ])
{
  id: ID!
  Author: String! @index(name: "byAuthor")
  Text: String!
  questionID: ID! @index(name: "byQuestion")
  parentID: ID @index(name: "byParent")
  imageUrl: String
  upvotes: Int @default(value: "0")
  downvotes: Int @default(value: "0")
}

type Question
  @model(
    subscriptions: {
      onCreate: ["onCreateQuestion"]
      onUpdate: ["onUpdateQuestion"]
      onDelete: ["onDeleteQuestion"]
    }
  )
  @auth(rules: [
    { allow: public, operations: [create, read, update, delete] },
    { allow: owner, operations: [create, read, update, delete], identityClaim: "sub" }
  ])
{
  id: ID!
  Author: String! @index(name: "byAuthor")
  Text: String!
  imageUrl: String
  upvotes: Int @default(value: "0")
  downvotes: Int @default(value: "0")
  Answers: [Answer] @hasMany(indexName: "byQuestion", fields: ["id"])
}
